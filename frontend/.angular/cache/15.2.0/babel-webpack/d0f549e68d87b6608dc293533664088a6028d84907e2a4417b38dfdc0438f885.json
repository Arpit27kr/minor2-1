{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:8080/api/products';\n  }\n  getProductList(theCategoryId) {\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAFtB,YAAO,GAAG,oCAAoC;EAER;EAE9CC,cAAc,CAACC,aAAqB;IAClC,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACC,OAAO,+BAA+BF,aAAa,EAAE;IAC/E,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAAcF,SAAS,CAAC,CAACG,IAAI,CACrDT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAC7C;EACH;;AAXWX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAY,SAAdZ,cAAc;EAAAa,YAFb;AAAM","names":["map","ProductService","constructor","httpClient","getProductList","theCategoryId","searchUrl","baseUrl","get","pipe","response","_embedded","products","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Vikas\\OneDrive\\Desktop\\minor2\\minor2\\frontend\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Product } from '../common/product';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n  private baseUrl = 'http://localhost:8080/api/products';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getProductList(theCategoryId: number): Observable<Product[]> {\r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\r\n    return this.httpClient.get<GetResponse>(searchUrl).pipe(\r\n      map(response => response._embedded.products)\r\n    );\r\n  }\r\n}\r\n\r\ninterface GetResponse {\r\n  _embedded: {\r\n    products: Product[];\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}